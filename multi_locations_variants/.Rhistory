x_epi_start <- weekly_res$R$t_start # weekly_res$R$t_end #(weekly_res$R$t_start + weekly_res$R$t_end)/2 #
x_epi_end <- weekly_res$R$t_end #(weekly_res$R$t_start + weekly_res$R$t_end)/2 #
x_epi_mid <- (weekly_res$R$t_start + weekly_res$R$t_end)/2 #
### Plot daily EpiEstim
col <- 'blue'
plot(daily_res$R$t_start, daily_res$R$`Median(R)`,
type = 'l', col = col,
ylim = c(0,4), bty='none',
xlab = '',ylab = 'R_t',
main = names(target)[i])
polygon(c(daily_res$R$t_start,rev(daily_res$R$t_start)),
c(daily_res$R$`Quantile.0.025(R)`,rev(daily_res$R$`Quantile.0.975(R)`)),
border = NA, col = scales::alpha(col, 0.3))
abline(h = 1, col = 'red3', lty = 2)
# ### Plot weekly EpiEstim
# # plot weekly EpiEstim at start of time window
# col <- 'red3'
# lines(x_epi_start, weekly_res$R$`Median(R)`,
#      type = 'l',col = col,
#      ylim = c(0,4), bty='none',
#      xlab = '',ylab = 'R_t',
#      main = names(target)[i])
# polygon(c(x_epi_start,rev(x_epi_start)),
#         c(weekly_res$R$`Quantile.0.025(R)`,rev(weekly_res$R$`Quantile.0.975(R)`)),
#         border = NA, col = scales::alpha(col, 0.3))
# # end of time window
# col <- 'gold'
# lines(x_epi_end, weekly_res$R$`Median(R)`,
#       type = 'l', col = col)
# polygon(c(x_epi_end,rev(x_epi_end)),
#         c(weekly_res$R$`Quantile.0.025(R)`,rev(weekly_res$R$`Quantile.0.975(R)`)),
#         border = NA, col = scales::alpha(col, 0.3))
# # mid of time window
# col <- 'orange'
# lines(x_epi_mid, weekly_res$R$`Median(R)`,
#       type = 'l', col = col)
# polygon(c(x_epi_mid,rev(x_epi_mid)),
#         c(weekly_res$R$`Quantile.0.025(R)`,rev(weekly_res$R$`Quantile.0.975(R)`)),
#         border = NA, col = scales::alpha(col, 0.3))
#
# abline(h = 1, col = 'red3', lty = 2)
### Plot target
lines(1:length(target[[i]]), target[[i]],
lty = 2,col = 'black')
if(i == 1) {
legend('topright',
c('target',
'Weekly EpiEstim (start)','Weekly EpiEstim (mid)','Weekly EpiEstim (end)',
'Daily EpiEstim'),
lty = c(2, 1, 1, 1, 1),
bty = 'n', col= c('black','red3', 'orange', 'gold', 'blue'))
}
}
par(mfrow = c(2, 2))
for(i in 1:4){
weekly_res <- estimate_R(incid = I[,i],
method = "non_parametric_si",
config = make_config(list(si_distr = SI_sim,
t_start = t_start,
t_end = t_end,
mean_prior = mean_prior,
std_prior = std_prior)))
daily_res <- estimate_R(incid = I[,i],
method = "non_parametric_si",
config = make_config(list(si_distr = SI_sim,
t_start = seq(2, nrow(I), 1),
t_end = seq(2, nrow(I), 1),
mean_prior = mean_prior,
std_prior = std_prior)))
x_epi_start <- weekly_res$R$t_start # weekly_res$R$t_end #(weekly_res$R$t_start + weekly_res$R$t_end)/2 #
x_epi_end <- weekly_res$R$t_end #(weekly_res$R$t_start + weekly_res$R$t_end)/2 #
x_epi_mid <- (weekly_res$R$t_start + weekly_res$R$t_end)/2 #
### Plot daily EpiEstim
col <- 'blue'
plot(daily_res$R$t_start, daily_res$R$`Median(R)`,
type = 'l', col = col,
ylim = c(0,4), bty='none',
xlab = '',ylab = 'R_t',
main = names(target)[i])
polygon(c(daily_res$R$t_start,rev(daily_res$R$t_start)),
c(daily_res$R$`Quantile.0.025(R)`,rev(daily_res$R$`Quantile.0.975(R)`)),
border = NA, col = scales::alpha(col, 0.3))
abline(h = 1, col = 'red3', lty = 2)
# ### Plot weekly EpiEstim
# # plot weekly EpiEstim at start of time window
# col <- 'red3'
# lines(x_epi_start, weekly_res$R$`Median(R)`,
#      type = 'l',col = col,
#      ylim = c(0,4), bty='none',
#      xlab = '',ylab = 'R_t',
#      main = names(target)[i])
# polygon(c(x_epi_start,rev(x_epi_start)),
#         c(weekly_res$R$`Quantile.0.025(R)`,rev(weekly_res$R$`Quantile.0.975(R)`)),
#         border = NA, col = scales::alpha(col, 0.3))
# # end of time window
# col <- 'gold'
# lines(x_epi_end, weekly_res$R$`Median(R)`,
#       type = 'l', col = col)
# polygon(c(x_epi_end,rev(x_epi_end)),
#         c(weekly_res$R$`Quantile.0.025(R)`,rev(weekly_res$R$`Quantile.0.975(R)`)),
#         border = NA, col = scales::alpha(col, 0.3))
# # mid of time window
# col <- 'orange'
# lines(x_epi_mid, weekly_res$R$`Median(R)`,
#       type = 'l', col = col)
# polygon(c(x_epi_mid,rev(x_epi_mid)),
#         c(weekly_res$R$`Quantile.0.025(R)`,rev(weekly_res$R$`Quantile.0.975(R)`)),
#         border = NA, col = scales::alpha(col, 0.3))
#
# abline(h = 1, col = 'red3', lty = 2)
### Plot target
lines(1:length(target[[i]]), target[[i]],
lty = 2,col = 'black')
if(i == 1) {
legend('topright',
c('target',
'Weekly EpiEstim (start)','Weekly EpiEstim (mid)','Weekly EpiEstim (end)',
'Daily EpiEstim'),
lty = c(2, 1, 1, 1, 1),
bty = 'n', col= c('black','red3', 'orange', 'gold', 'blue'))
}
}
par(mfrow = c(2, 2))
for(i in 1:4){
weekly_res <- estimate_R(incid = I[,i],
method = "non_parametric_si",
config = make_config(list(si_distr = SI_sim,
t_start = t_start,
t_end = t_end,
mean_prior = mean_prior,
std_prior = std_prior)))
daily_res <- estimate_R(incid = I[,i],
method = "non_parametric_si",
config = make_config(list(si_distr = SI_sim,
t_start = seq(2, nrow(I), 1),
t_end = seq(2, nrow(I), 1),
mean_prior = mean_prior,
std_prior = std_prior)))
x_epi_start <- weekly_res$R$t_start # weekly_res$R$t_end #(weekly_res$R$t_start + weekly_res$R$t_end)/2 #
x_epi_end <- weekly_res$R$t_end #(weekly_res$R$t_start + weekly_res$R$t_end)/2 #
x_epi_mid <- (weekly_res$R$t_start + weekly_res$R$t_end)/2 #
### Plot daily EpiEstim
col <- 'blue'
plot(daily_res$R$t_start, daily_res$R$`Median(R)`,
type = 'l', col = col,
ylim = c(0,4), bty='none',
xlab = '',ylab = 'R_t',
main = names(target)[i])
polygon(c(daily_res$R$t_start,rev(daily_res$R$t_start)),
c(daily_res$R$`Quantile.0.025(R)`,rev(daily_res$R$`Quantile.0.975(R)`)),
border = NA, col = scales::alpha(col, 0.3))
abline(h = 1, col = 'red3', lty = 2)
# ### Plot weekly EpiEstim
# # plot weekly EpiEstim at start of time window
# col <- 'red3'
# lines(x_epi_start, weekly_res$R$`Median(R)`,
#      type = 'l',col = col,
#      ylim = c(0,4), bty='none',
#      xlab = '',ylab = 'R_t',
#      main = names(target)[i])
# polygon(c(x_epi_start,rev(x_epi_start)),
#         c(weekly_res$R$`Quantile.0.025(R)`,rev(weekly_res$R$`Quantile.0.975(R)`)),
#         border = NA, col = scales::alpha(col, 0.3))
# # end of time window
# col <- 'gold'
# lines(x_epi_end, weekly_res$R$`Median(R)`,
#       type = 'l', col = col)
# polygon(c(x_epi_end,rev(x_epi_end)),
#         c(weekly_res$R$`Quantile.0.025(R)`,rev(weekly_res$R$`Quantile.0.975(R)`)),
#         border = NA, col = scales::alpha(col, 0.3))
# # mid of time window
# col <- 'orange'
# lines(x_epi_mid, weekly_res$R$`Median(R)`,
#       type = 'l', col = col)
# polygon(c(x_epi_mid,rev(x_epi_mid)),
#         c(weekly_res$R$`Quantile.0.025(R)`,rev(weekly_res$R$`Quantile.0.975(R)`)),
#         border = NA, col = scales::alpha(col, 0.3))
#
# abline(h = 1, col = 'red3', lty = 2)
### Plot target
lines(1:length(target[[i]]), target[[i]],
lty = 2,col = 'black')
if(i == 1) {
legend('topright',
c('target',
'Weekly EpiEstim (start)','Weekly EpiEstim (mid)','Weekly EpiEstim (end)',
'Daily EpiEstim'),
lty = c(2, 1, 1, 1, 1),
bty = 'n', col= c('black','red3', 'orange', 'gold', 'blue'))
}
}
par(mfrow = c(2, 2))
for(i in 1:4){
weekly_res <- estimate_R(incid = I[,i],
method = "non_parametric_si",
config = make_config(list(si_distr = SI_sim,
t_start = t_start,
t_end = t_end,
mean_prior = mean_prior,
std_prior = std_prior)))
x_epi_start <- weekly_res$R$t_start # weekly_res$R$t_end #(weekly_res$R$t_start + weekly_res$R$t_end)/2 #
x_epi_end <- weekly_res$R$t_end #(weekly_res$R$t_start + weekly_res$R$t_end)/2 #
x_epi_mid <- (weekly_res$R$t_start + weekly_res$R$t_end)/2 #
### Plot weekly EpiEstim
# plot weekly EpiEstim at start of time window
col <- 'red3'
plot(x_epi_start, weekly_res$R$`Median(R)`,
type = 'l',col = col,
ylim = c(0,4), bty='none',
xlab = '',ylab = 'R_t',
main = names(target)[i])
polygon(c(x_epi_start,rev(x_epi_start)),
c(weekly_res$R$`Quantile.0.025(R)`,rev(weekly_res$R$`Quantile.0.975(R)`)),
border = NA, col = scales::alpha(col, 0.3))
# end of time window
col <- 'gold'
lines(x_epi_end, weekly_res$R$`Median(R)`,
type = 'l', col = col)
polygon(c(x_epi_end,rev(x_epi_end)),
c(weekly_res$R$`Quantile.0.025(R)`,rev(weekly_res$R$`Quantile.0.975(R)`)),
border = NA, col = scales::alpha(col, 0.3))
# mid of time window
col <- 'orange'
lines(x_epi_mid, weekly_res$R$`Median(R)`,
type = 'l', col = col)
polygon(c(x_epi_mid,rev(x_epi_mid)),
c(weekly_res$R$`Quantile.0.025(R)`,rev(weekly_res$R$`Quantile.0.975(R)`)),
border = NA, col = scales::alpha(col, 0.3))
abline(h = 1, col = 'red3', lty = 2)
### Plot target
lines(1:length(target[[i]]), target[[i]],
lty = 2,col = 'black')
if(i == 1) {
legend('topright',
c('target',
'Weekly EpiEstim (start)','Weekly EpiEstim (mid)','Weekly EpiEstim (end)',
'Daily EpiEstim'),
lty = c(2, 1, 1, 1, 1),
bty = 'n', col= c('black','red3', 'orange', 'gold', 'blue'))
}
}
par(mfrow = c(2, 2))
for(i in 1:4){
weekly_res <- estimate_R(incid = I[,i],
method = "non_parametric_si",
config = make_config(list(si_distr = SI_sim,
t_start = t_start,
t_end = t_end,
mean_prior = mean_prior,
std_prior = std_prior)))
x_epi_start <- weekly_res$R$t_start # weekly_res$R$t_end #(weekly_res$R$t_start + weekly_res$R$t_end)/2 #
x_epi_end <- weekly_res$R$t_end #(weekly_res$R$t_start + weekly_res$R$t_end)/2 #
x_epi_mid <- (weekly_res$R$t_start + weekly_res$R$t_end)/2 #
### Plot weekly EpiEstim
# plot weekly EpiEstim at start of time window
col <- 'red3'
plot(x_epi_start, weekly_res$R$`Median(R)`,
type = 'l',col = col,
ylim = c(0,4), bty='none',
xlab = '',ylab = 'R_t',
main = names(target)[i])
polygon(c(x_epi_start,rev(x_epi_start)),
c(weekly_res$R$`Quantile.0.025(R)`,rev(weekly_res$R$`Quantile.0.975(R)`)),
border = NA, col = scales::alpha(col, 0.3))
# end of time window
col <- 'gold'
lines(x_epi_end, weekly_res$R$`Median(R)`,
type = 'l', col = col)
polygon(c(x_epi_end,rev(x_epi_end)),
c(weekly_res$R$`Quantile.0.025(R)`,rev(weekly_res$R$`Quantile.0.975(R)`)),
border = NA, col = scales::alpha(col, 0.3))
# mid of time window
col <- 'orange'
lines(x_epi_mid, weekly_res$R$`Median(R)`,
type = 'l', col = col)
polygon(c(x_epi_mid,rev(x_epi_mid)),
c(weekly_res$R$`Quantile.0.025(R)`,rev(weekly_res$R$`Quantile.0.975(R)`)),
border = NA, col = scales::alpha(col, 0.3))
abline(h = 1, col = 'red3', lty = 2)
### Plot target
lines(1:length(target[[i]]), target[[i]],
lty = 2,col = 'black')
if(i == 1) {
legend('topright',
c('target',
'Weekly EpiEstim (start)','Weekly EpiEstim (mid)','Weekly EpiEstim (end)'),
lty = c(2, 1, 1, 1, 1),
bty = 'n', col= c('black','red3', 'orange', 'gold'))
}
}
setwd("../simulations/")
##################################################################################
### Generating time varying reproduction numbers for 2 locations and 2 strains ###
##################################################################################
source("./projections_code.R")
type <- "SEASONAL"
#type <- "CHANGEPOINT"
calc_seasonality <- function(date, seasonality_date_peak, seasonality,
period = 365) {
delta <- ((date - seasonality_date_peak) %% period) / period
beta_mult <- 1 + cos(2 * pi * delta) * seasonality
beta_mult
}
ndays <- 100
date <- seq(1, ndays, 1)
# set up changes over time in location 1 due mostly to seasonality
seasonality_date_peak_loc1 <- 90
seasonality_loc1 <- 0.2 # do + / - 10% of the average at the peak
seas_loc1 <- calc_seasonality(date, seasonality_date_peak_loc1, seasonality_loc1,
period = 20)
# set up changes over time in location 2 due mostly to rapid cahnges in policy
seasonality_date_peak_loc2 <- 30
seasonality_loc2 <- 0.3 # do + / - 10% of the average at the peak
seas_loc2 <- calc_seasonality(date, seasonality_date_peak_loc2, seasonality_loc2,
period = 100)
if(type == "SEASONAL") {
# generate a time varying reproduction number for location 1
R1_loc1 <- 2.5 * seas_loc1
R1_loc2 <- 2.5 * seas_loc2
# bring min to 1
R1_loc1 <- R1_loc1 - min(R1_loc1) +1
R1_loc2 <- 2.5 * seas_loc2 - min(R1_loc2) +1
} else if(type == "CHANGEPOINT"){
# generate a time varying reproduction number for location 1
R1_loc1 <- c(rep(2.5, round(ndays / 2)), rep(1.5, round(ndays / 2)))
R1_loc2 <- c(rep(2.5, round(ndays / 4)), rep(1.5, round(3 * ndays / 4)))
}
transmission_advantage <- 1.5
R2_loc1 <- transmission_advantage * R1_loc1
R2_loc2 <- transmission_advantage * R1_loc2
par(mfrow = c(2, 2))
plot(date, R1_loc1, type = "l", ylim = c(0, 5), ylab = "R")
lines(date, R1_loc2, col = "blue")
lines(date, R2_loc1, lty = 2)
lines(date, R2_loc2, col = "blue", lty = 2)
legend("bottomleft", c("Strain 1, location 1", "Strain 1, location 2",
"Strain 2, location 1", "Strain 2, location 2"),
col = c("black", "blue", "black", "blue"), lty = c(1, 1, 2, 2), cex = .7)
##################################################################################
### Simulate epidemics with those reproduction numbers ###
##################################################################################
set.seed(1)
## covid serial interval vaguely resembling this
## https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7448781/
si <- EpiEstim::discr_si(0:30, mu = 5.40, sigma = 2) # I made up the sd
si_no_zero <- si[-1]
plot(seq(0, length(si) - 1, 1), si,
type = "h", xlab = "Day", ylab = "PMF of the SI")
## start with 5 infected individual
initial_incidence <- incidence::incidence(rep(1, 5))
## location 1 strain 1
inc1_loc1 <- rbind(initial_incidence$counts,
as.matrix(#projections::project(initial_incidence,
debug_project(initial_incidence,
R = R1_loc1[-1], # R in the future so removing time of seeding
si = si_no_zero,
n_sim = 1,
n_days = ndays - 1,
time_change = seq_len(length(R1_loc1) - 2) - 1,
instantaneous_R = TRUE)))
## location 2 strain 1
inc1_loc2 <- rbind(initial_incidence$counts,
as.matrix(#projections::project(initial_incidence,
debug_project(initial_incidence,
R = R1_loc2[-1],
si = si_no_zero,
n_sim = 1,
n_days = ndays - 1,
time_change = seq_len(length(R1_loc2) - 2) - 1,
instantaneous_R = TRUE)))
## location 1 strain 2
inc2_loc1 <- rbind(initial_incidence$counts,
as.matrix(#projections::project(initial_incidence,
debug_project(initial_incidence,
R = R2_loc1[-1],
si = si_no_zero,
n_sim = 1,
n_days = ndays - 1,
time_change = seq_len(length(R2_loc1) - 2) - 1,
instantaneous_R = TRUE)))
## location 2 strain 2
inc2_loc2 <- rbind(initial_incidence$counts,
as.matrix(#projections::project(initial_incidence,
debug_project(initial_incidence,
R = R2_loc2[-1],
si = si_no_zero,
n_sim = 1,
n_days = ndays - 1,
time_change = seq_len(length(R2_loc2) - 2) - 1,
instantaneous_R = TRUE)))
plot(log(1 + inc1_loc1[, 1]), type= "l", xlab = "date", ylab = "log(1 + Incidence)")
lines(log(1 + inc1_loc2[, 1]), col = "blue")
lines(log(1 + inc2_loc1[, 1]), lty = 2)
lines(log(1 + inc2_loc2[, 1]), col = "blue", lty = 2)
legend("bottomright", c("Strain 1, location 1", "Strain 1, location 2",
"Strain 2, location 1", "Strain 2, location 2"),
col = c("black", "blue", "black", "blue"), lty = c(1, 1, 2, 2), cex = 0.7)
##################################################################################
### Generate summary objects ###
##################################################################################
incidence <- as.data.frame(cbind(inc1_loc1, inc1_loc2, inc2_loc1, inc2_loc2))
names(incidence) <- c("strain1_loc1", "strain1_loc2", "strain2_loc1", "strain2_loc2")
saveRDS(incidence, "incidence.rds")
saveRDS(si, "si.rds")
# target Rt
target_Rt = list(R1_loc1 = R1_loc1,
R2_loc1 = R2_loc1,
R1_loc2 = R1_loc2,
R2_loc2 = R2_loc2)
saveRDS(target_Rt, 'target_Rt.rds')
set.seed(1)
# runif(1,0,1)
library(knitr)
library(EpiEstim)
opts_chunk$set(collapse = TRUE)
opts_chunk$set(fig.path='figs/', fig.keep='high',
dev=c('png'), cache=FALSE,
tidy=FALSE, warning=FALSE, fig.show="asis"
)
data_incidence <- readRDS('../simulations/incidence.rds')
SI_sim <- readRDS('../simulations/si.rds')
target <- readRDS('../simulations/target_Rt.rds')
n_location <- as.integer(4)
I <- data_incidence[,c(1,3,2,4)]
t_window <- 7
t_start <- seq(2, nrow(I)-(t_window-1))
t_end <- t_start + (t_window-1)
## prior R
mean_prior <- c(2)
std_prior <- c(1)
par(mfrow = c(2, 2))
for(i in 1:4){
daily_res <- estimate_R(incid = I[,i],
method = "non_parametric_si",
config = make_config(list(si_distr = SI_sim,
t_start = seq(2, nrow(I), 1),
t_end = seq(2, nrow(I), 1),
mean_prior = mean_prior,
std_prior = std_prior)))
### Plot daily EpiEstim
col <- 'blue'
plot(daily_res$R$t_start, daily_res$R$`Median(R)`,
type = 'l', col = col,
ylim = c(0,4), bty='none',
xlab = '',ylab = 'R_t',
main = names(target)[i])
polygon(c(daily_res$R$t_start,rev(daily_res$R$t_start)),
c(daily_res$R$`Quantile.0.025(R)`,rev(daily_res$R$`Quantile.0.975(R)`)),
border = NA, col = scales::alpha(col, 0.3))
abline(h = 1, col = 'red3', lty = 2)
### Plot target
lines(1:length(target[[i]]), target[[i]],
lty = 2,col = 'black')
if(i == 1) {
legend('topright',
c('target',
'Daily EpiEstim'),
lty = c(2, 1, 1, 1, 1),
bty = 'n', col= c('black', 'blue'))
}
}
par(mfrow = c(2, 2))
for(i in 1:4){
weekly_res <- estimate_R(incid = I[,i],
method = "non_parametric_si",
config = make_config(list(si_distr = SI_sim,
t_start = t_start,
t_end = t_end,
mean_prior = mean_prior,
std_prior = std_prior)))
x_epi_start <- weekly_res$R$t_start # weekly_res$R$t_end #(weekly_res$R$t_start + weekly_res$R$t_end)/2 #
x_epi_end <- weekly_res$R$t_end #(weekly_res$R$t_start + weekly_res$R$t_end)/2 #
x_epi_mid <- (weekly_res$R$t_start + weekly_res$R$t_end)/2 #
### Plot weekly EpiEstim
# plot weekly EpiEstim at start of time window
col <- 'red3'
plot(x_epi_start, weekly_res$R$`Median(R)`,
type = 'l',col = col,
ylim = c(0,4), bty='none',
xlab = '',ylab = 'R_t',
main = names(target)[i])
polygon(c(x_epi_start,rev(x_epi_start)),
c(weekly_res$R$`Quantile.0.025(R)`,rev(weekly_res$R$`Quantile.0.975(R)`)),
border = NA, col = scales::alpha(col, 0.3))
# end of time window
col <- 'gold'
lines(x_epi_end, weekly_res$R$`Median(R)`,
type = 'l', col = col)
polygon(c(x_epi_end,rev(x_epi_end)),
c(weekly_res$R$`Quantile.0.025(R)`,rev(weekly_res$R$`Quantile.0.975(R)`)),
border = NA, col = scales::alpha(col, 0.3))
# mid of time window
col <- 'orange'
lines(x_epi_mid, weekly_res$R$`Median(R)`,
type = 'l', col = col)
polygon(c(x_epi_mid,rev(x_epi_mid)),
c(weekly_res$R$`Quantile.0.025(R)`,rev(weekly_res$R$`Quantile.0.975(R)`)),
border = NA, col = scales::alpha(col, 0.3))
abline(h = 1, col = 'red3', lty = 2)
### Plot target
lines(1:length(target[[i]]), target[[i]],
lty = 2,col = 'black')
if(i == 1) {
legend('topright',
c('target',
'Weekly EpiEstim (start)','Weekly EpiEstim (mid)','Weekly EpiEstim (end)'),
lty = c(2, 1, 1, 1, 1),
bty = 'n', col= c('black','red3', 'orange', 'gold'))
}
}
24999.58 + 76,591.61
24999.58 + 76591.61
